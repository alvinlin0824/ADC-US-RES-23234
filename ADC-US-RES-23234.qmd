---
title: "ADC-US-RES-23234 Insulin Pump Suspension Study `r params$title2`"
description: "To characterize beta-hydroxybutyrate ketone levels in people with type 1 diabetes using continuous subcutaneous insulin infusion (CSII) during a planned suspension of their insulin pump"
author: "Alvin, Lin"
date: "`r Sys.Date()`"
format:
   html:
     theme: flatly
     self-contained: true
toc: true
toc-depth: 3
toc-location: left
execute:
  echo: false
  warning: false 
  keep-md: true
params:
  analysis: TRUE
  plot: FALSE
  title1: "Profile Plot"
  title2: "Accuracy Performance"
---

<!-- EDC \\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current -->

<!-- UUU \\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\UploadData\UUU\UUU_DataFiles -->

<!-- Study Protocol \\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-23234_IDE Pump Suspension Study\Protocol -->

<!-- CRF \\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-23234_IDE Pump Suspension Study\Case Report Forms\Version B\Approved\pdf -->

<!-- DMP \\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-23234_IDE Pump Suspension Study\CDM\Study_Binder\Data_Management_Plan\Version_1.0\Final -->

<!-- Lori Rankin-Grundvig Site 133 Yale. Martin, Pamela Site 009 Rainier -->

```{r}
#| label: Libaray Packages 
#| message: false
library(tidyverse)
library(reactable)
library(haven)
library(janitor)
library(reactablefmtr)
library(htmltools)
library(UUU)
library(fs)
library(highcharter)
library(vroom)
library(gt)
```

<!-- UDP -->
```{r}
#| label: Import csv
#| eval: false
file_list <- dir_ls(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\UploadData\UUU\UUU_DataFiles)"),recurse = T)
```

```{r}
#| label: Copy extracted_realm.zip to T drive
#| eval: false
file_list[str_detect(file_list,"extracted_realm.zip|dualsensors_upload_info.xml") & !str_detect(file_list,regex("Transfers|Archive"))] |>
  file_copy(gsub("\\\\", "/", r"(C:\UDP\InputFiles)"))
```

```{r}
#| label: Move UDP output files to T drive
# file_copy(gsub("\\\\", "/", r"(C:\UDP\OutputFiles\Output_2023-09-06-15-01)"),gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-23234_IDE Pump Suspension Study\Statistics\Upload Data)"))
```
<!-- UDP -->

```{r}
#|label: Import IV1
iv1 <- read_sas(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current\iv1.sas7bdat)"))
iv1 <- iv1 |>
       filter(!str_detect(IVYN01,regex("Check here if no data recorded",ignore_case = T))) |>
       mutate(Subject = as.character(Subject)) |>
       arrange(Subject)
```

```{r}
#|label: Import IV2
iv2 <- read_sas(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current\iv2.sas7bdat)"))
iv2 <- iv2 |>
       filter(!is.na(IVID01)) |> 
       mutate(Subject = as.character(Subject),
              IVID01 = as.character(IVID01)) |>
       arrange(Subject)
```

```{r}
#| label: IV2 left join IV1
iv12 <- iv2 |> 
        select(Subject,`__STUDYEVENTREPEATKEY`,IVID01,IVTM01,IVVAL01) |> 
        left_join(iv1 |>
                  select(Subject,`__STUDYEVENTREPEATKEY`,IVDTC01),
                  by = join_by("Subject","__STUDYEVENTREPEATKEY")) |> 
        select(!`__STUDYEVENTREPEATKEY`) |> 
        arrange(Subject,IVDTC01)
```

```{r}
#|label: Import kgr1
kgr1 <- read_sas(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current\kgr1.sas7bdat)"))
kgr1 <- kgr1 |>
        filter(!str_detect(KRYN01,regex("Check here if no data recorded",ignore_case = T))) |>
        mutate(Subject = as.character(Subject)) |>
        arrange(Subject)
```

```{r}
#|label: Import kgr2
kgr2 <- read_sas(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current\kgr2.sas7bdat)"))
kgr2 <- kgr2 |>
        mutate(Subject = as.character(Subject),
               KRSEQ02 = as.character(KRSEQ02)) |>
        arrange(Subject)
```

```{r}
#| label: KGR2 left join KGR1
kgr12 <- kgr2 |> 
         select(Subject,KRSEQ02:KRDTC03) |> 
         left_join(kgr1 |> 
                   select(Subject,KRDTC01),
                   by = join_by(Subject == Subject)) |> 
         arrange(Subject,KRDTC01)
```

```{r}
#| label: KGR12 left join IV12
kgriv12 <- kgr12 |> 
           filter(!is.na(KRSEQ02)) |> 
           # Manually Change Sample ID
           mutate(KRSEQ02 = case_when(
            str_detect(Subject,"1330001") & str_length(KRSEQ02) == 1 ~ str_c("1010",KRSEQ02),
            str_detect(Subject,"1330001") & str_length(KRSEQ02) == 2 ~ str_c("101",KRSEQ02),
            str_detect(Subject,"1330002") & str_length(KRSEQ02) == 1 ~ str_c("1020",KRSEQ02),
            str_detect(Subject,"1330002") & str_length(KRSEQ02) == 2 ~ str_c("102",KRSEQ02),
            str_detect(Subject,"1330004") & KRSEQ02 == "10730" ~ "10430",
            .default = KRSEQ02)) |> 
           left_join(iv12, 
                     by = join_by(Subject == Subject,KRSEQ02 == IVID01, KRDTC01 == IVDTC01)) |> 
           mutate(`Ketone Date Time` = ymd_hm(str_c(KRDTC01,IVTM01,sep = " ")),
                  `Glucose Date Time` = ymd_hm(str_c(KRDTC01,KRDTC03,sep = " ")),
                  KRDTC02 = NULL
                  ,.keep = "unused",.before = KRSEQ03) |> 
           arrange(Subject,`Ketone Date Time`) |> 
           filter(str_detect(IVVAL01,"Valid"))
```

```{r}
#| label: Get Time duration
ketone <- kgriv12 |> 
          left_join(
            # Find the Peak Time and consider duplicated max values
            kgriv12 |> 
              slice_max(KRSEQ01,n = 1,with_ties = F,by = Subject) |> 
              select(Subject, `Peak Time` = `Ketone Date Time`),
              by = join_by(Subject)) |> 
          mutate(`Time < 1 mmol/L` = case_when(max(KRSEQ01) > 1 & 
                                             `Ketone Date Time` > `Peak Time` & 
                                              KRSEQ01 < 1  ~ `Ketone Date Time`),
                 `Time < 1 mmol/L` = first(`Time < 1 mmol/L`,na_rm = T),
                 duration_to_peak = as.numeric(difftime(`Ketone Date Time`,first(`Ketone Date Time`),units = "hours")),
                 duration_to_below_1mmol = as.numeric(difftime(`Time < 1 mmol/L`,`Peak Time` ,units = "hours")),.by = Subject) 
```

```{r eval = params$analysis}
#| label: Summary for Ketone Reference
summary_calculation <- list(Mean = ~ mean(.x, na.rm = T),
                            Median = ~ median(.x, na.rm = T),
                            SD = ~ sd(.x, na.rm = T),
                            Min = ~ min(.x, na.rm = T),
                            Max = ~ max(.x, na.rm = T),
                            N = ~ sum(!is.na(.x),na.rm = T))
ketone |>
   group_by(Subject) |>
   summarise_at("KRSEQ01",summary_calculation) |>
   # Fix round half to even
   mutate(across(c(Mean,SD), ~ round(.x + 0.0001,2))) |> 
   gt() |>
   cols_align(align = "center") |>
   opt_stylize(style = 6, color = "blue") |>
   tab_header(title = md("**Ketone Test Result (mmol/L)**"))
```

```{r eval = params$analysis}
#| label: Duration Table
ketone |> 
  slice_max(KRSEQ01,n = 1,with_ties = F,by = Subject) |> 
  left_join(
    ketone |> 
    select(Subject,`Start Time` = `Ketone Date Time`) |> 
    slice(1,.by = Subject),by = join_by(Subject)) |> 
  select(Subject,`Start Time`,`Peak Time`,
         `Max Ketone Reference(mmol/L)` = KRSEQ01,`Time once < 1 mmol/L` = `Time < 1 mmol/L`,
         `Time to Peak(Hours)` = duration_to_peak, `Time to < 1 mmol/L(Hours)` = duration_to_below_1mmol) |>
  # Fix round half to even
  mutate(across(c(`Time to Peak(Hours)`,`Time to < 1 mmol/L(Hours)`), ~ round(.x + 0.0001,2))) |> 
  arrange(Subject) |> 
  gt() |>
  cols_align(align = "center") |>
  opt_stylize(style = 6, color = "blue")
  # tab_header(title = md("**Ketone Test Result (mmol/L)**"))
```

```{r eval = params$analysis}
#| label: Summary for Peak
#| column: body
ketone |> 
     filter(KRSEQ01 == max(KRSEQ01) & !is.na(`Time < 1 mmol/L`) ,.by = Subject) |> 
     slice_min(`Ketone Date Time`, n = 1, with_ties = F,by = Subject) |> 
     summarise(across(c(KRSEQ01,duration_to_peak,duration_to_below_1mmol),summary_calculation[c(1,3,6)],.names = "{.col} {.fn}")) |> 
     gt() |> 
     cols_align(align = "center") |>
     tab_spanner(label = "Maximum Ketone Level Achieved",columns = c("KRSEQ01 Mean","KRSEQ01 SD","KRSEQ01 N")) |>
     tab_spanner(label = "Time(Hours) To Peak Ketone Level From First Test",columns = c("duration_to_peak Mean","duration_to_peak SD","duration_to_peak N")) |>
     tab_spanner(label = "Time(Hours) From Peak Ketone Level to Ketone Level < 1 mmol/L",columns = c("duration_to_below_1mmol Mean","duration_to_below_1mmol SD","duration_to_below_1mmol N")) |>
     fmt_number(columns = contains(c("Mean","SD")),decimals = 2) |>
     cols_label(
      `KRSEQ01 Mean` = "Mean",`KRSEQ01 SD` = "SD",
      `KRSEQ01 N` = "N",
      `duration_to_peak Mean` = "Mean",`duration_to_peak SD` = "SD",`duration_to_peak N` = "N",
      `duration_to_below_1mmol Mean` = "Mean",`duration_to_below_1mmol SD` = "SD",
      `duration_to_below_1mmol N` =  "N") |>
      opt_stylize(style = 6, color = "blue")
```

```{r eval = params$analysis}
#| label: Ketone Reference Plot
#| fig-align: center
ketone |>
   mutate(eTime = as.numeric(difftime(`Ketone Date Time`,first(`Ketone Date Time`),units = "hours")),.by = Subject) |> 
  ggplot(aes(x = eTime, y = KRSEQ01, color = Subject)) +
  geom_point() + 
  geom_line() + 
  scale_x_continuous(expand = c(0,0)) + 
  scale_y_continuous(expand = c(0,0)) + 
  geom_hline(yintercept = 1,linewidth = 1) + 
  labs(title = "Ketone Reference",x = "Time(Hours)", y = "Ketone Test Result (mmol/L)") +
  theme_bw() +
  theme(panel.grid.major.y = element_blank(),panel.grid.minor.y = element_blank(),legend.position = "bottom",plot.title = element_text(hjust = 0.5))
```

```{r eval = params$analysis}
#| label: Ketone Vary Over Time
#| fig-align: center
ketone |>
   mutate(eTime = as.numeric(difftime(`Ketone Date Time`,first(`Ketone Date Time`),units = "hours")),
          lag_diff = KRSEQ01 - lag(KRSEQ01),
          .by = Subject) |> 
  ggplot(aes(x = eTime, y = lag_diff, color = Subject)) +
  geom_point() + 
  geom_line() + 
  labs(title = "Ketone Vary Over Time",x = "Time(Hours)", y = "Ketone Test Result (mmol/L)") +
  scale_x_continuous(breaks = c(seq(1,8,1))) + 
  scale_y_continuous(breaks = c(seq(-1.0,1.0,0.2)),limits = c(-1,1)) +
  theme_bw() +
  theme(panel.grid.major.y = element_blank(),panel.grid.minor.y = element_blank(),legend.position = "bottom",plot.title = element_text(hjust = 0.5))
```

```{r eval = params$analysis}
#| label: Time From Baseline To Peak
#| fig-align: center
ketone |>
  filter(`Peak Time` >= `Ketone Date Time`,.by = Subject) |> 
  ggplot(aes(x = duration_to_peak, y = KRSEQ01, color = Subject)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(expand = c(0,0)) + 
  scale_y_continuous(expand = c(0,0)) + 
  labs(title = "Time From Baseline To Peak",x = "Time(Hours)", y = "Ketone Test Result (mmol/L)") +
  theme_bw() +
  theme(panel.grid.major.y = element_blank(),panel.grid.minor.y = element_blank(),legend.position = "bottom",plot.title = element_text(hjust = 0.5))
```

```{r eval = params$analysis}
#| label: Time From Peak To 1 mmol/L
#| fig-align: center
ketone |>
  filter(`Peak Time` <= `Ketone Date Time` & !is.na(duration_to_below_1mmol) >= 1,.by = Subject) |> 
  ggplot(aes(x = as.numeric(difftime(`Ketone Date Time`,`Peak Time`,units = "hours")), y = KRSEQ01, color = Subject)) +
  geom_point() +
  geom_line() +
  scale_x_continuous(expand = c(0,0)) + 
  scale_y_continuous(expand = c(0,0)) + 
  labs(title = "Time From Peak To 1 mmol/L",x = "Time(Hours)", y = "Ketone Test Result (mmol/L)") +
  theme_bw() +
  theme(panel.grid.major.y = element_blank(),panel.grid.minor.y = element_blank(),legend.position = "bottom",plot.title = element_text(hjust = 0.5))
```

```{r}
#| label: Import sa
# sa <- read_sas(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current\sa.sas7bdat)"))
```

```{r}
#| label: Wrangle SA
# sa <- sa |> 
#       filter(!str_detect(DUYN01,regex("CHECK HERE IF NO DATA RECORDED",ignore_case = T))) |>
#       mutate(Subject = as.character(Subject),
#              DUSEQ01 = as.numeric(DUSEQ01)) |> 
#       arrange(Subject)
```

```{r}
#| label: Import du2
# du2 <- read_sas(gsub("\\\\", "/", r"(\\wf00168p.oneabbott.com\data1\CDM\ADC-US-RES-23234\OpenClinica\Current\du2.sas7bdat)"))
```

```{r}
# du2 <- du2 |>
#        filter(!str_detect(UPDTC02,"^$|pattern")) |>
#        mutate(Subject = as.character(Subject),
#               UPDTC02  = hms::parse_hms(UPDTC02),
#               UPID01 = as.numeric(UPID01)) |>
#        arrange(Subject,desc(UPDTC01),UPDTC02)
```

```{r}
#| label: Import ketone events, anaplus files csv
#| eval: false
file_list_ketone <- dir_ls(gsub("\\\\", "/", r"(C:\UDP\OutputFiles\Output_2023-11-02-13-54\outputs)"),recurse = T,glob = "*events.csv|*anaPlus.csv")
```

```{r}
#| label: Ketone Filter events, anaPlus
#| eval: false
events_path_ketone <- filter_path(file_path = file_list_ketone)[[1]]
anaplus_path_ketone <- filter_path(file_path = file_list_ketone)[[5]] 
```

```{r}
#| label: Output ketone.rds
#| warning: false
#| eval: false
mobi_anaPlus(events = events_path_ketone, ana = anaplus_path_ketone) |> 
          mutate(`Date Time` = case_when(
            # Subject 90009 RU1 Sensor Start is wrong
            `Sensor Serial Number` == "089CR2CRA" & 
  Type == "SENSOR_STARTED (58)" ~ `Date Time` - dhours(12),
            `Sensor Serial Number` == "089CR2FAX" ~ `Date Time` + dhours(2),
            `Sensor Serial Number` == "089CR2ELD" ~ `Date Time` - dhours(1),
              .default = `Date Time`)) |> 
          arrange(`Subject ID`,`Condition ID`,`Date Time`) |>
          fill(`Sensor Serial Number`,.direction = "updown") |> 
        # Consider Replaced sensor
          filter(`Sensor Serial Number` != "089CR2EAN" | is.na(`Sensor Serial Number`)) |> 
     saveRDS(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-23234_IDE Pump Suspension Study\Statistics\Programs\Datasets\AL\ketone.rds)"))
```

```{r}
#| label: Import ketone.rds
upload_ketone <- readRDS(gsub("\\\\", "/", r"(\\oneabbott.com\dept\ADC\Technical_OPS\Clinical_Affairs\Clinical Study Files\Apollo\ADC-US-RES-23234_IDE Pump Suspension Study\Statistics\Programs\Datasets\AL\ketone.rds)"))
```

```{r eval = params$analysis}
#| label: Pair Ketone Reference
PairKetone <- function(sensor_data){
  # ketone reference
  ketone |>
    rename(`Subject ID` = Subject) |> 
    inner_join(
      # Sensor Data
      sensor_data |>
        dplyr::mutate(
          # `Date Time` = force_tz(`Date Time`,tz = "UTC"),
          `Lower Bound` = round_date(`Date Time`,"minute") - dminutes(5),
          `Upper Bound` = round_date(`Date Time`,"minute") + dminutes(5)
        ),
      by = join_by("Subject ID", between(`Ketone Date Time`,`Lower Bound`,`Upper Bound`)),
      multiple = "all"
    ) |> 
    # Select the nearest time
    group_by(`Subject ID`,`Ketone Date Time`) |>
    arrange(desc(`Date Time`)) |> 
    slice_min(abs(`Ketone Date Time` - round_date(`Date Time`,"minute")),n = 1,with_ties = F) |>
    ungroup() |> 
    # Select the nearest time
    group_by(`Subject ID`,`Date Time`) |>
    arrange(desc(`Date Time`)) |>
    slice_min(abs(`Ketone Date Time` - round_date(`Date Time`,"minute")),n = 1,with_ties = F) |>
    ungroup() |>
    select(!c(contains("Bound")))
}
```

```{r eval = params$analysis}
#| label: Pair Ketone
Ap <- upload_ketone |> 
      select(!c(Path, Tr)) |> 
      filter(Type == "906",year(`Date Time`) == 2023) |>  
      # filter(`Subject ID` == "1330005", `Condition ID` == "LL1") |>
      group_split(`Subject ID`,`Condition ID`,`Sensor Serial Number`) |>  
      # New anonymous function
      map(\(df) PairKetone(sensor_data = df),.progress = T) |>
      list_rbind() |> 
      # Rate
      mutate(ANA = (ANA/100)*1.25,
             Level = case_when(KRSEQ01 < 1 ~ "< 1 mmol/L",
                              .default = ">= 1 mmol/L"),
             sensor_rate = (ANA-lag(ANA)) / (as.numeric(difftime(`Date Time`,lag(`Date Time`),units = "hours"))),
             ref_rate = ((KRSEQ01-lag(KRSEQ01))) / (as.numeric(difftime(`Ketone Date Time`,lag(`Ketone Date Time`),units = "hours"))),
             `Rate Deviation` = round((ref_rate - sensor_rate) + 0.0000000001,8),
             `Absolute Rate Deviation` = abs(`Rate Deviation`),
      # Assign Category
          `Rate Deviation(mmol/L/hour)` = fct_case_when(
            `Rate Deviation` < -3 ~ "<-3",
            `Rate Deviation` >= -3 & `Rate Deviation` < -2 ~ "[-3, -2)",
            `Rate Deviation` >= -2 & `Rate Deviation` < -1 ~ "[-2, -1)",
            `Rate Deviation` >= -1 & `Rate Deviation` < 0 ~ "[-1, 0)",
            `Rate Deviation` >= 0 & `Rate Deviation` <= 1 ~ "[0, 1]",
            `Rate Deviation` > 1 & `Rate Deviation` <= 2 ~ "(1, 2]",
            `Rate Deviation` > 2 & `Rate Deviation` <= 3 ~ "(2, 3]",
            `Rate Deviation` > 3  ~ ">3"),
          `Absolute Rate Deviation(mmol/L/hour)` = fct_case_when(
            `Absolute Rate Deviation` >= 0 & `Absolute Rate Deviation` <= 1~ "[0, 1]",
            `Absolute Rate Deviation` > 1 & `Absolute Rate Deviation` <= 2 ~ "(1, 2]",
            `Absolute Rate Deviation` > 2 & `Absolute Rate Deviation` <= 3 ~ "(2, 3]",
            `Absolute Rate Deviation` > 3  ~ ">3"),
            # Accuracy
            `Difference(mmol/L)` = ANA - KRSEQ01,
            `Absolute Difference(mmol/L)` = abs(`Difference(mmol/L)`),
            `Relative Difference(%)` = (`Difference(mmol/L)`/KRSEQ01)*100,
            `Absolute Relative Difference(%)` = abs(`Relative Difference(%)`),
       .by = `Sensor Serial Number`)
```

```{r eval = params$analysis}
#| label: Summary for Rate Deviation
Ap |> 
   filter(between(ANA,0.6,3)) |> 
   filter(!is.na(`Rate Deviation`)) |> 
   tabyl(`Rate Deviation(mmol/L/hour)`) |> 
   adorn_totals("row") |> 
   gt() |> 
   cols_align(align = "center") |>
   fmt_percent(columns = percent, decimals = 2) |> 
   opt_stylize(style = 6, color = "blue")
```

```{r eval = params$analysis}
#| label: Summary for Absolute Rate Deviation
Ap |> 
   filter(between(ANA,0.6,3)) |>
   filter(!is.na(`Rate Deviation`)) |> 
   tabyl(`Absolute Rate Deviation(mmol/L/hour)`) |> 
   adorn_totals("row") |> 
   gt() |> 
   cols_align(align = "center") |>
   fmt_percent(columns = percent, decimals = 2) |> 
   opt_stylize(style = 6, color = "blue")
```

```{r eval = params$analysis}
#| label: Summary statistics for rate deviation
diff_calculation <- list(Mean = ~ mean(.x, na.rm = T),
                          Median = ~ median(.x, na.rm = T),
                          SD = ~ sd(.x, na.rm = T),
                          Min = ~ min(.x, na.rm = T),
                          Max = ~ max(.x, na.rm = T),
                          N = ~ sum(!is.na(.x),na.rm = T))
Ap |>
   filter(between(ANA,0.6,3)) |>
   filter(!is.na(`Rate Deviation`)) |> 
   pivot_longer(`Rate Deviation`:`Absolute Rate Deviation`,names_to = "Variable") |> 
   group_by(Variable) |> 
   summarise_at(.vars = c("value"),.funs = diff_calculation) |> 
   gt() |> 
   cols_align(align = "center") |>
   fmt_number(columns = Mean:Max,decimals = 2) |> 
   opt_stylize(style = 6, color = "blue")  
```

```{r eval = params$analysis}
#| label: Histogram of Rate Deviation
Ap |>
   filter(between(ANA,0.6,3)) |>
   filter(!is.na(`Rate Deviation`)) |>
   ggplot() +
   geom_histogram(aes(x = `Rate Deviation`, y = ..density..),bins = 50) +
   scale_x_continuous(breaks = c(seq(-10,10,1)),limits = c(-10,10)) +
   theme_bw() + 
   theme(panel.grid.major.y = element_blank(),panel.grid.minor.y = element_blank(),legend.position = "bottom",plot.title = element_text(hjust = 0.5))
```

```{r eval = params$analysis}
#| label: System Agreement
#| column: page
ketone_breaks <- c(0,0.1,0.2,0.3,0.4,Inf)
ketone_breaks_percent <- c(0,10,20,30,40,Inf)
sys <- Ap |> 
        bind_rows(
          Ap |> 
          mutate(Level = "Overall")) |> 
        filter(between(ANA,0.6,3)) |>
        mutate(Level = factor(Level,levels = c("< 1 mmol/L",">= 1 mmol/L","Overall")),
               Group = case_when(Level == "< 1 mmol/L" & KRSEQ01 < 1 ~ cut(`Absolute Difference(mmol/L)`, breaks = ketone_breaks,include.lowest = T),
                             Level == ">= 1 mmol/L" & KRSEQ01 >= 1 ~ cut(round(`Absolute Relative Difference(%)` + 0.001,0), breaks = ketone_breaks_percent,include.lowest = T),
                             Level == "Overall" & KRSEQ01 < 1  ~ cut(100*`Absolute Difference(mmol/L)`, breaks = ketone_breaks_percent,include.lowest = T),
                             Level == "Overall" & KRSEQ01 >= 1 ~ cut(round(`Absolute Relative Difference(%)` + 0.001,0), breaks = ketone_breaks_percent,include.lowest = T))
           ) |> 
          group_by(Level) |>
          count(Level,Group,.drop = F) |> 
          # Remove redundant factor levels
          filter(!(Level == "< 1 mmol/L"
                 & Group %in% c("[0,10]","(10,20]","(20,30]","(30,40]","(40,Inf]")) &
                 !(Level %in% c(">= 1 mmol/L","Overall")
                 & Group %in% c("[0,0.1]","(0.1,0.2]","(0.2,0.3]","(0.3,0.4]","(0.4,Inf]"))) |> 
          mutate(Sum = sum(n),
                 cum = case_when(row_number() %in% c(1:4) ~ cumsum(n),
                      .default = n),
                 Percent = case_when(Sum == 0 ~ 0,
                          .default = round((cum/Sum)*100,1))) |> 
         ungroup() |>
         filter(!is.na(Level))
 # sys |>
 #   mutate(Group = case_when(
 #          Level == "< 1 mmol/L" & Group == "[0,0.1]" ~ "Within ± 0.1 mmol/L",
 #          Level == "< 1 mmol/L" & Group == "(0.1,0.2]" ~ "Within ± 0.2 mmol/L",
 #          Level == "< 1 mmol/L" & Group == "(0.2,0.3]" ~ "Within ± 0.3 mmol/L",
 #          Level == "< 1 mmol/L" & Group == "(0.3,0.4]" ~ "Within ± 0.4 mmol/L",
 #          Level == "< 1 mmol/L" & Group == "(0.4,Inf]" ~ "Outside ± 0.4 mmol/L",
 #          
 #          Level == ">= 1 mmol/L" & Group == "[0,10]" ~ "Within ± 10%",
 #          Level == ">= 1 mmol/L" & Group == "(10,20]" ~ "Within ± 20%",
 #          Level == ">= 1 mmol/L" & Group == "(20,30]" ~ "Within ± 30%",
 #          Level == ">= 1 mmol/L" & Group == "(30,40]" ~ "Within ± 40%",
 #          Level == ">= 1 mmol/L" & Group == "(40,Inf]" ~ "Outside ± 40%",
 #          
 #          Level == "Overall" & Group == "[0,10]" ~ "Within ± 10% / Within ± 0.1 mmol/L",
 #          Level == "Overall" & Group == "(10,20]" ~ "Within ± 20% / Within ± 0.2 mmol/L",
 #          Level == "Overall" & Group == "(20,30]" ~ "Within ± 30% / Within ± 0.3 mmol/L",
 #          Level == "Overall" & Group == "(30,40]" ~ "Within ± 40% / Within ± 0.4 mmol/L",
 #          Level == "Overall" & Group == "(40,Inf]" ~ "Outside ± 40%/ Outside ± 0.4 mmol/L"),
 #          `N(%)` = str_c(cum,"/",Sum," ","(",Percent,"%)")) |> 
 #  pivot_wider(id_cols = !c(n:Percent),names_from = NULL,values_from = `N(%)`)

 sys |>
         mutate(Group = case_when(
           Group %in% c("[0,10]","[0,0.1]") ~ "Within ± 10% / Within ± 0.1 mmol/L",
           Group %in% c("(10,20]","(0.1,0.2]") ~ "Within ± 20% / Within ± 0.2 mmol/L",
           Group %in% c("(20,30]","(0.2,0.3]") ~ "Within ± 30% / Within ± 0.3 mmol/L",
           Group %in% c("(30,40]","(0.3,0.4]") ~ "Within ± 40% / Within ± 0.4 mmol/L",
           Group %in% c("(40,Inf]","(0.4,Inf]") ~ "Outside ± 40%/ Outside ± 0.4 mmol/L"),
          `N(%)` = str_c(cum,"/",Sum," ","(",Percent,"%)")) |>
    pivot_wider(id_cols = !c(n:Percent),names_from = Group,values_from = `N(%)`) |> 
    gt() |>
    cols_align(align = "center") |>
    cols_width(everything() ~ px(200)) |>
    opt_stylize(style = 6, color = "blue")
```

```{r eval = params$analysis}
#| label: Difference Measures
Ap |> 
   bind_rows(
     Ap |> 
        mutate(Level = "Overall")) |> 
    filter(between(ANA,0.6,3)) |>
    group_by(Level) |> 
     summarise(
      across(c(`Difference(mmol/L)`:`Absolute Relative Difference(%)`), 
              diff_calculation[1:3],.names = "{.col} {.fn}"), N = n()) |> 
     relocate(N,.after = last_col()) |> 
     gt()  |> 
     cols_align(align = "center") |> 
     tab_spanner(label = "Difference(mmol/L)",columns = c("Difference(mmol/L) Mean","Difference(mmol/L) Median","Difference(mmol/L) SD")) |> 
     tab_spanner(label = "Abs. Difference (mmol/L)",columns = c("Absolute Difference(mmol/L) Mean","Absolute Difference(mmol/L) Median","Absolute Difference(mmol/L) SD")) |> 
     tab_spanner(label = "Relative Difference(%)",columns = c("Relative Difference(%) Mean","Relative Difference(%) Median","Relative Difference(%) SD")) |> 
     tab_spanner(label = "Absolute Relative Difference(%)",columns = c("Absolute Relative Difference(%) Mean","Absolute Relative Difference(%) Median","Absolute Relative Difference(%) SD")) |> 
     fmt_number(columns = contains(c("Mean","Median")),decimals = 1) |> 
     fmt_number(columns = contains(c("SD")),decimals = 1) |> 
     cols_label(
      `Difference(mmol/L) Mean` = "Mean",`Difference(mmol/L) Median` = "Median",
      `Difference(mmol/L) SD` = "SD",
      `Relative Difference(%) Mean` = "Mean",`Relative Difference(%) Median` = "Median",`Relative Difference(%) SD` = "SD",
      `Absolute Difference(mmol/L) Mean` = "Mean",`Absolute Difference(mmol/L) Median` = "Median",
      `Absolute Difference(mmol/L) SD` =  "SD",`Absolute Relative Difference(%) Mean` = "Mean",
      `Absolute Relative Difference(%) Median` = "Median",
      `Absolute Relative Difference(%) SD` = "SD"
    ) |> 
      opt_stylize(style = 6, color = "blue")
```

```{r eval = params$analysis}
#| label: Concurrence function
concur_fun <- function(data, trans = FALSE){
  

data %>%  
   # Create YSI and GM Category
                                  # Round half to even, so add noise
   mutate(`KM (mmol/L)` =  
                        fct_case_when(ANA < 0.6 ~ "<0.6",
                                      ANA >= 0.6 & ANA < 1.0 ~ "[0.6-1.0)",
                                      ANA >= 1.0 & ANA <= 1.5 ~ "[1.0-1.5]",
                                      ANA > 1.5 & ANA <= 3.0 ~ "(1.5-3.0]",
                                      ANA > 3.0 ~ ">3.0"),
          `Ref (mmol/L)` =  
                      fct_case_when(KRSEQ01 < 0.6 ~ "<0.6",
                                    KRSEQ01 >= 0.6 & KRSEQ01 < 1.0 ~ "[0.6-1.0)",
                                    KRSEQ01 >= 1.0 & KRSEQ01 <= 1.5 ~ "[1.0-1.5]",
                                    KRSEQ01 > 1.5 & KRSEQ01 <= 3.0 ~ "(1.5-3.0]",
                                    KRSEQ01 > 3.0 ~ ">3.0")) %>% 
    # Three Way contingency Table
    {if (trans == FALSE) tabyl(.,`KM (mmol/L)`,`Ref (mmol/L)`) 
     else tabyl(.,`Ref (mmol/L)`,`KM (mmol/L)`)} %>% 
    adorn_totals("col") %>% 
    adorn_percentages("row") %>%  
    adorn_pct_formatting(digits = 1) %>%
    adorn_ns() %>% 
    mutate(Total = str_remove_all(Total,"100.0%|\\(|\\)")) %>%
    gt() %>% 
    cols_align(align = "center") %>%
    sub_missing(columns = everything(),missing_text = "") %>%
    opt_stylize(style = 6, color = "blue") %>%
    {if (trans == FALSE) tab_spanner(.,label = "Ref (mmol/L)",columns = !contains("Total"))
    else tab_spanner(.,label = "KM (mmol/L)",columns = -contains("Total"))} %>%
    # Add Header
    {if (trans == FALSE ) tab_header(.,title = md("Concurrence Analysis by Ketone Level (KM vs. Ref)"))
    else (tab_header(.,title = md("Concurrence Analysis by Glucose Level (Ref vs. KM)")))}
}
```

```{r eval = params$analysis}
#| label: KM vs Ref
Ap |> 
   concur_fun(trans = F)
```

```{r eval = params$analysis}
#| label: Ref vs KM
Ap |> 
   concur_fun(trans = T)
```

```{r}
# haven::read_sas("ap.sas7bdat") |> 
#   mutate(condition_id = case_when(snr == "089CR2FAX" ~ "LL1",
#                                   snr == "089CR2ELD" ~ "LU1",
#                                   .default = condition_id)) |> 
#   select(!snr) |> 
#   dplyr::intersect(
# haven::read_sas("s234_paired 2.sas7bdat") |>
#   bind_rows(
#     haven::read_sas("s234_paired_orr.sas7bdat")
#   ) |>
#   transmute(dtm_sec = dtm_sec,
#             subject = as.character(subjid),
#             condition_id = condition_id,
#             type = type,
#             ana_100 = ket*1.25,
#             dtm_ref = ref_dtm,
#             KRSEQ01 = ket_ref) |>
#   filter(type == "906") |>
#   arrange(subject))

haven::read_sas("ap.sas7bdat") |> 
    mutate(condition_id = case_when(snr == "089CR2FAX" ~ "LL1",
                                  snr == "089CR2ELD" ~ "LU1",
                                  .default = condition_id)) |> 
  select(!snr) |> 
  dplyr::setdiff(
haven::read_sas("s234_paired 2.sas7bdat") |>
  bind_rows(
    haven::read_sas("s234_paired_orr.sas7bdat")
  ) |>
  transmute(dtm_sec = dtm_sec,
            subject = as.character(subjid),
            condition_id = condition_id,
            type = type,
            ana_100 = ket*1.25,
            dtm_ref = ref_dtm,
            KRSEQ01 = ket_ref) |>
  filter(type == "906") |>
  arrange(subject)) |> 
  bind_cols(

haven::read_sas("s234_paired 2.sas7bdat") |>
  bind_rows(
    haven::read_sas("s234_paired_orr.sas7bdat")
  ) |>
  transmute(dtm_sec = dtm_sec,
            subject = as.character(subjid),
            condition_id = condition_id,
            type = type,
            ana_100 = ket*1.25,
            dtm_ref = ref_dtm,
            KRSEQ01 = ket_ref) |>
  filter(type == "906") |>
  arrange(subject) |> 
  dplyr::setdiff(
    haven::read_sas("ap.sas7bdat") |> 
    mutate(condition_id = case_when(snr == "089CR2FAX" ~ "LL1",
                                  snr == "089CR2ELD" ~ "LU1",
                                  .default = condition_id)) |> 
    select(!snr)
  )) |> 
  vroom_write("Paired.csv",delim = ",")
```



```{r eval = params$plot}
breakdown_condition_plot <- function(Id) {
  highchart() %>%
  # Add title
  hc_title(text = str_c("Subject = ",Id)) %>% 
  # continuous Sensor Data
  hc_add_series(
    # name = "Libre Sensor Reading",
    data = upload_ketone %>%
           filter(`Subject ID` == Id,
                  Type == "906", year(`Date Time`) == 2023) %>%
           slice(seq(1,n(),3),.by = c(`Sensor Serial Number`)) %>%
           # multiple and consecutive wears
           arrange(`Date Time`),
    type = "line",
    yAxis = 0,
    hcaes(x = datetime_to_timestamp(`Date Time`), y = ANA/100, group = `Condition ID`)) %>%
    # Glucose Reference 
    hc_add_series(
    name = "Glucose Test Result",
    data = kgriv12 %>%
           filter(Subject == Id),
    type = "scatter",
    yAxis = 1,
    color = "#9900FF",
    marker = list(symbol = "triangle"),
    hcaes(x = datetime_to_timestamp(`Glucose Date Time`), y = KRSEQ03)) %>%
    # Ketone Reference 
    hc_add_series(
    name = "Ketone Test Result",
    data = kgriv12 %>%
           filter(Subject == Id),
    type = "scatter",
    yAxis = 0,
    color = "#FF0000",
    # marker = list(symbol = "triangle"),
    hcaes(x = datetime_to_timestamp(`Ketone Date Time`), y = KRSEQ01)) %>% 
    # Add X label
    hc_xAxis(title = list(text = "Date Time"),
             type = "datetime", 
             dateTimeLabelFormats = list(day = '%d %b %y')) %>%
    # Add Y axis
    # Add new y axis
    hc_yAxis_multiples(list(title = list(text = "Ketone Test Result(mmol/L)"), opposite = FALSE),
                      list(showLastLabel = FALSE, opposite = TRUE, title = list(text = "Glucose Test Result(mg/dL)"))) %>%
    # hc_yAxis(title = list(text = "Ketone Test Result (mmol/L)")) %>%
    # Change the size of marker
    hc_plotOptions(scatter = list(
                            marker = list(radius = 1.9, symbol = "circle"))) %>%
    # Change the format of point
    hc_tooltip(pointFormat = '{point.x: %Y-%m-%d %H:%M:%S} {point.y:.1f} ')  %>% 
    # Add zoom in function
    hc_chart(zoomType = "xy") %>% 
    # Add navigator
    hc_navigator(enabled = TRUE)
}
```

```{r}
#| column: screen
#| eval: false
breakdown_condition_plot(Id = "1330001")
```

```{r eval = params$plot}
#| label: For Loop Plots
#| column: screen
plots <- list()
for (i in 1:n_distinct(upload_ketone$`Subject ID`)){
  plots[[i]] <- breakdown_condition_plot(Id = unique(upload_ketone$`Subject ID`)[i])
}
htmltools::tagList(plots)
```